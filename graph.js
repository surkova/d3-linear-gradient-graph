// Generated by CoffeeScript 1.3.1
(function() {

  $(function() {
    'use strict';

    var beginning, color, dataset, drawAxes, drawGraph, end, events, format, h, index, padding, r, svg, timestamps, travelTimes, ts, w, x, y;
    timestamps = ['02:11:00', '02:11:02', '02:11:04', '02:11:06', '02:11:08', '02:11:10', '02:11:12', '02:11:14', '02:11:16', '02:11:18'];
    events = [10, 15, 134, 23, 56, 33, 16, 34, 56, 23];
    travelTimes = [2, 13, 35, 5, 30, 1, 10, 15, 22, 4];
    dataset = [];
    dataset = (function() {
      var _i, _len, _results;
      _results = [];
      for (index = _i = 0, _len = timestamps.length; _i < _len; index = ++_i) {
        ts = timestamps[index];
        _results.push([timestamps[index], events[index], travelTimes[index]]);
      }
      return _results;
    })();
    w = 890;
    h = 500;
    padding = 40;
    svg = d3.select('#graph').append('svg:svg').attr('width', w).attr('height', h);
    format = d3.time.format('%H:%M:%S');
    beginning = format.parse(timestamps[0]);
    end = format.parse(timestamps[9]);
    x = d3.time.scale().domain([beginning, end]).range([padding, w - padding / 2]);
    y = d3.scale.linear().domain([0, d3.max(events) + padding / 2]).range([h - padding, padding / 2]);
    r = d3.scale.sqrt().domain([d3.min(travelTimes), d3.max(travelTimes)]).range([8, 16]);
    color = d3.scale.linear().domain([d3.min(travelTimes), d3.max(travelTimes)]).range(['white', 'black']);
    drawAxes = function() {
      var xAxis, yAxis;
      xAxis = d3.svg.axis().scale(x).orient('bottom').ticks(d3.time.seconds, 2);
      yAxis = d3.svg.axis().scale(y).orient('left');
      svg.append('svg:g').attr('class', 'axis').attr("transform", "translate(0," + (h - padding) + ")").call(xAxis);
      return svg.append('svg:g').attr('class', 'axis').attr("transform", "translate(" + padding + ",0)").call(yAxis);
    };
    drawGraph = function() {
      var area, defs, line, offset;
      line = d3.svg.line().x(function(d) {
        return x(format.parse(d[0])) + 1;
      }).y(function(d) {
        return y(d[1]);
      }).interpolate('monotone');
      area = d3.svg.area().x(function(d) {
        return x(format.parse(d[0])) + 1;
      }).y0(h - padding - 1).y1(function(d) {
        return y(d[1]);
      }).interpolate('monotone');
      defs = svg.append('svg:defs');
      offset = -100 / (dataset.length - 1);
      defs.append('svg:linearGradient').attr('id', 'gradient').selectAll('stop').data(dataset).enter().append('stop').attr('offset', function(d) {
        offset += 100 / (dataset.length - 1);
        return offset + '%';
      }).style('stop-color', function(d) {
        return color(d[2]);
      });
      svg.append('svg:path').attr('class', 'path').attr('d', line(dataset));
      return svg.append('svg:path').attr('class', 'area').attr('d', area(dataset));
    };
    drawAxes();
    return drawGraph();
  });

}).call(this);
